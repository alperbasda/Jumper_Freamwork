<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ import namespace="System" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ assembly name="Newtonsoft.Json" #>
<#@ assembly name="System.Runtime" #>
<#@ import namespace="System.Runtime" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="Newtonsoft.Json.Linq" #>
<#@ assembly name="_Dependencies\Jumper.Common.dll" #>
<#@ import namespace="Jumper.Common.Constants" #>
<#@ import namespace="Jumper.Common.DirectoryHelpers" #>
<#@ import namespace="Jumper.Common.StringHelpers" #>
<#@ import namespace="Jumper.Common.FileHelpers" #>

<#@ output extension=".cs" #>

<#
    
    string settingsJson = File.ReadAllText(FileSettings.ReadProjectPath);
    var datasource = JObject.Parse(settingsJson);
    var filePath = $"{FileSettings.ProjectCreateDirectory}{datasource["SolutionName"]}/Cqrs/{datasource["SolutionName"]}.Domain/Entities";
    DirectoryHelper.CreateDirectoryIfNotExists(filePath);
#>


<#

var entities = datasource["Entities"].Where(w => w["DatabaseType"]!.ToString() != "4");
foreach (var item in entities!)
{
#>
<#= FileSettings.AUTO_GENERATED_MESSAGE #>
using Core.Persistence.Models;
namespace <#= datasource["SolutionName"] #>.Domain.Entities;

public class <#= item["Name"] #> : Entity<Guid>
{
<#    
        foreach(var prop in item["Properties"])
        {
             if (ProjectSettings.EntityExculededProperties.Contains(prop["Name"].ToString()))
             {
                continue;
             }
             if(prop["PropertyTypeCode"].ToString() != "string?")
             {
             WriteLine($"\tpublic {prop["Prefix"]} {prop["PropertyTypeCode"]} {prop["Name"]} {{ get; set; }}");
             }
             else
             {
             WriteLine($"\tpublic {prop["Prefix"]} {prop["PropertyTypeCode"]} {prop["Name"]} {{ get; set; }} = null!;");
             }
             
        }
#>
}


<#    
FileHelper.CreateAndClearBuilder($"{filePath}/{item["Name"]}.cs",this.GenerationEnvironment);
}
#>
