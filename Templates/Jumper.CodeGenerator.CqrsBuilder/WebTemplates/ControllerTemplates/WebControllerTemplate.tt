<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ import namespace="System" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ assembly name="Newtonsoft.Json" #>
<#@ assembly name="System.Runtime" #>
<#@ import namespace="System.Runtime" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="Newtonsoft.Json.Linq" #>
<#@ assembly name="_Dependencies\Jumper.Common.dll" #>
<#@ import namespace="Jumper.Common.Constants" #>
<#@ import namespace="Jumper.Common.DirectoryHelpers" #>
<#@ import namespace="Jumper.Common.StringHelpers" #>
<#@ import namespace="Jumper.Common.FileHelpers" #>
<#@ output extension=".cs" #>

<#
    
    string settingsJson = File.ReadAllText(FileSettings.ReadProjectPath);
    var datasource = JObject.Parse(settingsJson);
    var filePath = $"{FileSettings.ProjectCreateDirectory}{datasource["SolutionName"]}/Presentation/{datasource["SolutionName"]}.UI.Web/Controllers";
    DirectoryHelper.CreateDirectoryIfNotExists(filePath);
#>
<#
foreach (var entity in datasource["Entities"])
{
#>
<#= FileSettings.AUTO_GENERATED_MESSAGE #>
using <#= datasource["SolutionName"] #>.Application.Features.<#= entity["Name"].ToString().ToPlural() #>.Commands.Create;
using <#= datasource["SolutionName"] #>.Application.Features.<#= entity["Name"].ToString().ToPlural() #>.Commands.DeleteById;
using <#= datasource["SolutionName"] #>.Application.Features.<#= entity["Name"].ToString().ToPlural() #>.Commands.Update;
using <#= datasource["SolutionName"] #>.Application.Features.<#= entity["Name"].ToString().ToPlural() #>.Queries.GetById;
using <#= datasource["SolutionName"] #>.Application.Features.<#= entity["Name"].ToString().ToPlural() #>.Queries.ListDynamic;
using <#= datasource["SolutionName"] #>.UI.Web.ActionFilters;
using <#= datasource["SolutionName"] #>.UI.Web.Controllers.Base;
using Core.Persistence.Models.Responses;
using Microsoft.AspNetCore.Mvc;
using System.Collections.Specialized;
using System.Web;
using Core.WebHelper.NameValueCollectionHelpers;
using Core.WebHelper.ControllerExtensions;
using Core.Persistence.Dynamic;
<# 
if(ProjectSettings.NoSqlDatabaseTypes.Contains(entity["DatabaseType"].ToString()))
{
WriteLine($"using {datasource["SolutionName"]}.Domain.MongoEntities;");
}
else
{
WriteLine($"using {datasource["SolutionName"]}.Domain.Entities;");
}
#>

namespace <#= datasource["SolutionName"] #>.UI.Web.Controllers
{
    [Route("<#= entity["Name"].ToString() #>")]
    [AuthorizeHandler]
    public class <#= entity["Name"].ToString() #>Controller : MediatrController
    {
        private const string SUCCESS_MESSAGE = "İşlem Başarılı";

        [HttpGet("index")]
        public async Task<IActionResult> Index()
        {
            NameValueCollection collection = HttpUtility.ParseQueryString(HttpContext.Request.QueryString.Value ?? "");
            var pageRequest = collection.ToPageRequest();
            var dynamicQuery = collection.ToDynamicFilter<<#= entity["Name"].ToString() #>>();
            var response = await Mediator.Send(new ListDynamic<#= entity["Name"].ToString() #>Query { DynamicQuery = dynamicQuery, PageRequest = pageRequest });
            return View(response);
        }

        [HttpGet("create")]
        public IActionResult Create()
        {
            return View();
        }

        [HttpPost("create")]
        public async Task<IActionResult> Create(Create<#= entity["Name"].ToString() #>Command command)
        {
            var response = await Mediator.Send(command);
            return RedirectToAction("Index", "<#= entity["Name"].ToString() #>").Success(SUCCESS_MESSAGE);
        }

        [HttpGet("update/{id}")]
        public async Task<IActionResult> Update(Guid id)
        {
            var response = await base.Mediator.Send(new GetById<#= entity["Name"].ToString() #>Query { Id = id });
            return View(response);
        }

        [HttpPost("update")]
        public async Task<IActionResult> Update(Update<#= entity["Name"].ToString() #>Command command)
        {
            var response = await Mediator.Send(command);
            return RedirectToAction("Index", "<#= entity["Name"].ToString() #>").Success(SUCCESS_MESSAGE);
        }

        [HttpGet("deleteasync/{id}")]
        public async Task<IActionResult> DeleteAsync(Guid id)
        {
            var response =  await base.Mediator.Send(new DeleteById<#= entity["Name"].ToString() #>Command { Id = id });
            return Json(SUCCESS_MESSAGE);
        }

        [HttpGet("delete/{id}")]
        public async Task<IActionResult> Delete(Guid id)
        {
            var response =  await base.Mediator.Send(new DeleteById<#= entity["Name"].ToString() #>Command { Id = id });
            return Redirect(Request.Headers["Referer"].ToString()).Success(SUCCESS_MESSAGE);
    }

        <#
        var relatedData = entity["Properties"].FirstOrDefault(w=>w["IsShowOnRelation"].Value<bool>() == true);

        if(relatedData != null)
        {
        
        #>

        [HttpGet("dropdown")]
        public async Task<IActionResult> Dropdown(string searchTerm)
        {
            var query = new ListDynamic<#= entity["Name"].ToString() #>Query { DynamicQuery = new DynamicQuery { Filter = Filter.Create("<#= relatedData["Name"] #>", FilterOperator.ContainsIgnoreCase, searchTerm) } };
            return Json((await base.Mediator.Send(query)).Items.Select(w => new { id = w.Id, text = w.<#= relatedData["Name"] #> }));
        }

        <#
        }
        #>
        <#
        var relationalPropertyName = entity["Properties"].First(w=>w["IsShowOnRelation"].Value<bool>() == true)["Name"].ToString();
        WriteLine("");
        #>
        
        [HttpPost("getnames")]
        public async Task<IActionResult> GetNames(List<Guid> ids)
        {
            var dynamicQuery = new DynamicQuery()
            {
                Filter = Filter.Create("Id", FilterOperator.Equals, ids.First().ToString()),
            };
            if (ids.Count > 1)
            {
                var filterWay = IQueryableDynamicFilterExtensions.GetNewWay(dynamicQuery.Filter, Logic.Or);
                for (int i = 1; i < ids.Count; i++)
                {
                    filterWay.Filters!.Add(new Filter { Field = "Id", Logic = Logic.Or, Operator = FilterOperator.Equals, Value = ids[i].ToString() });
                }
            }
            var query = new ListDynamic<#= entity["Name"] #>Query { DynamicQuery = dynamicQuery };
            var datas = await base.Mediator.Send(query);
            return Json(datas.Items.Select(w => new { id = w.Id, text = w.<#= relationalPropertyName #> }));
        }

    }
}


<#    
FileHelper.CreateAndClearBuilder($"{filePath}/{entity["Name"].ToString()}Controller.cs",this.GenerationEnvironment);
}
#>
