<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ import namespace="System" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ assembly name="Newtonsoft.Json" #>
<#@ assembly name="System.Runtime" #>
<#@ import namespace="System.Runtime" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="Newtonsoft.Json.Linq" #>
<#@ assembly name="_Dependencies\Jumper.Common.dll" #>
<#@ import namespace="Jumper.Common.Constants" #>
<#@ import namespace="Jumper.Common.DirectoryHelpers" #>
<#@ import namespace="Jumper.Common.StringHelpers" #>
<#@ import namespace="Jumper.Common.FileHelpers" #>
<#@ output extension=".cs" #>

<#
    string settingsJson = File.ReadAllText(FileSettings.ReadProjectPath);
    var datasource = JObject.Parse(settingsJson);
    var filePath = $"{FileSettings.ProjectCreateDirectory}{datasource["SolutionName"]}/Presentation/{datasource["SolutionName"]}.UI.Web/Middlewares";
    DirectoryHelper.CreateDirectoryIfNotExists(filePath);
#>
<#= FileSettings.AUTO_GENERATED_MESSAGE #>
using Core.Application.Pipelines.Caching;
using Core.CrossCuttingConcerns.Serilog.Logger;
using Core.CrossCuttingConcerns.Serilog;
using StackExchange.Redis;
using MassTransit;
using Core.ApiHelpers.JwtHelper.Models;
using Core.Persistence.Models;
using Microsoft.AspNetCore.DataProtection;
using Microsoft.AspNetCore.Mvc.ViewFeatures;
using Microsoft.AspNetCore.Mvc;
using <#= datasource["SolutionName"] #>.UI.Web.Helpers;
using Microsoft.AspNetCore.Authentication.Cookies;
using <#= datasource["SolutionName"] #>.Application.Features.Auth.HttpClients;
using <#= datasource["SolutionName"] #>.Common.IdentityConfigurations;

namespace <#= datasource["SolutionName"] #>.UI.Web.Middlewares;

public static class AddWebRegistrationService
{
    public static IServiceCollection AddWebServices(this IServiceCollection services, IConfiguration configuration)
    {
        _ = services.AddSettingsSingleton<DatabaseOptions>(configuration);
        _ = services.AddSettingsSingleton<IdentityApiConfiguration>(configuration);
        _ = services.AddSettingsSingleton<JwtTokenOptions>(configuration);
        var identityApiSettings = services.AddSettingsSingleton<IdentityApiConfiguration>(configuration);

        services.AddHttpClient<IIdentityServerClientService, IdentityServerClientService>((client) =>
        {
            client.BaseAddress = new Uri(identityApiSettings.BaseAddress);
        });
        <#
        WriteLine("");
        if(datasource["UseCache"].Value<bool>() == true)
        {
        WriteLine("\t\tservices.AddDistributedMemoryCache();");
        WriteLine("\t\tvar cacheSettings = services.AddSettingsSingleton<CacheSettings>(configuration);");
        WriteLine("\t\tservices.AddRedis(cacheSettings);");
        }
        #>
        <#
        WriteLine("");
        if(datasource["UseRabbitMq"].Value<bool>() == true)
        {
        WriteLine("\t\tservices.AddAmqpServices(configuration);");
        }
        #>
        services.AddHttpClient();
        services.AddHttpContextAccessor();
        services.AddWebMessageServices();
        services.AddAuth();
        <#
        WriteLine("");
        if(datasource["SeriLogConfigurations"]["ElasticLogConfiguration"] != null && !string.IsNullOrEmpty(datasource["SeriLogConfigurations"]["ElasticLogConfiguration"]["Uri"].Value<string?>()))
        {
        WriteLine("\t\tservices.AddTransient<LoggerServiceBase, ElasticLogger>();");
        }
        else if(datasource["SeriLogConfigurations"]["FileLogConfiguration"] != null && !string.IsNullOrEmpty(datasource["SeriLogConfigurations"]["FileLogConfiguration"]["FolderPath"].Value<string?>()))
        {
        WriteLine("\t\tservices.AddTransient<LoggerServiceBase, FileLogger>();");
        }
        else if(datasource["SeriLogConfigurations"]["MsSqlLogConfiguration"] != null)
        {
        WriteLine("\t\t//Şimdilik Databaseloggeri destekleyemiyoruz.");
        }
        #>
        
        
        ScopeSafeServiceProvider.Create(services);
        return services;
    }

    public static void AddWebMessageServices(this IServiceCollection collection)
    {
        collection.AddSingleton<IDataProtectionProvider>(s => DataProtectionProvider.Create("<#= datasource["SolutionName"] #>"));

        collection.Configure<CookieTempDataProviderOptions>(options =>
        {

        });
        collection.AddSingleton<ITempDataProvider, CookieTempDataProvider>();
    }

    public static IServiceCollection AddAuth(this IServiceCollection services)
    {
        services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme)
                .AddCookie(options =>
                {

                    options.ExpireTimeSpan = TimeSpan.FromMinutes(20);
                    options.SlidingExpiration = true;
                    options.AccessDeniedPath = "/auth/login/";
                });

        services.AddScoped<AuthHelper>();
        services.AddScoped<TokenParameters>();

        return services;
    }

    //Redis cache i aktif etmek için çağırabilirsiniz. 
    public static void AddRedis(this IServiceCollection services, CacheSettings cacheSettings)
    {
        services.AddStackExchangeRedisCache(opt =>
        {

            opt.ConfigurationOptions = new ConfigurationOptions
            {
                Password = cacheSettings.Password,
                EndPoints =
                    {
                        { cacheSettings.Host, int.Parse(cacheSettings.Port) }
                    },
            };
        });
    }

    public static T AddSettingsSingleton<T>(this IServiceCollection services, IConfiguration configuration)
        where T : class, new()
    {
        T settings = new T();
        configuration.GetSection(settings.GetType().Name).Bind(settings);

        services.Configure<T>(options =>
        {
            options = settings;
        });
        services.AddSingleton<T>(sp =>
        {
            return settings;
        });

        return settings;
    }


    //Masstransit rabbitMq ayarlarını aktif etmek için çağırabilirsiniz. 
    public static void AddAmqpServices(this IServiceCollection services, IConfiguration configuration)
    {
        //consumerName alanlarına kuyruk isimleri girerek çoklayabilirsiniz.
        //services.AddScoped<consumerName>();
        services.AddMassTransit(x =>
        {
          //  x.AddConsumer<consumerName>();
            x.UsingRabbitMq((ctx, cfg) =>
            {
                cfg.Host(configuration["RabbitMq:Host"], ushort.Parse(configuration["RabbitMq:Port"]), "/", host =>
                {
                    host.Username(configuration["RabbitMq:UserName"]);
                    host.Password(configuration["RabbitMq:Password"]);
                });

                //kuyruk isimlerini Common altında QueueNames enum u ile tutmanız önerilir.
                //cfg.ReceiveEndpoint(queueName.GetDescription(), e =>
                //{
                //    e.PrefetchCount = 100;
                //    e.ConfigureConsumer(ctx, typeof(consumerName));

                //});

            });
        });

        services.Configure<MassTransitHostOptions>(options =>
        {
            options.WaitUntilStarted = false;
            options.StartTimeout = TimeSpan.FromSeconds(5);
            options.StopTimeout = TimeSpan.FromMinutes(1);
        });

    }

}

<#    
FileHelper.CreateAndClearBuilder($"{filePath}/WebRegistrationService.cs",this.GenerationEnvironment);

#>