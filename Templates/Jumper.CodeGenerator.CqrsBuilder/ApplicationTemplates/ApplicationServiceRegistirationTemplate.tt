<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ import namespace="System" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ assembly name="Newtonsoft.Json" #>
<#@ assembly name="System.Runtime" #>
<#@ import namespace="System.Runtime" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="Newtonsoft.Json.Linq" #>
<#@ assembly name="_Dependencies\Jumper.Common.dll" #>
<#@ import namespace="Jumper.Common.Constants" #>
<#@ import namespace="Jumper.Common.DirectoryHelpers" #>
<#@ import namespace="Jumper.Common.StringHelpers" #>
<#@ import namespace="Jumper.Common.FileHelpers" #>
<#@ output extension=".cs" #>

<#
    
    string settingsJson = File.ReadAllText(FileSettings.ReadProjectPath);
    var datasource = JObject.Parse(settingsJson);
    var filePath = $"{FileSettings.ProjectCreateDirectory}{datasource["SolutionName"]}/Cqrs/{datasource["SolutionName"]}.Application";
    DirectoryHelper.CreateDirectoryIfNotExists(filePath);
#>
<#= FileSettings.AUTO_GENERATED_MESSAGE #>
using Core.Application.Pipelines.Caching;
using Core.Application.Pipelines.Logging;
using Core.Application.Pipelines.Transaction;
using Core.Application.Pipelines.Validation;
using FluentValidation;
using <#= datasource["SolutionName"] #>.Application.Base;
using <#= datasource["SolutionName"] #>.Application.Features.Auth.HttpClients;
using <#= datasource["SolutionName"] #>.Common.IdentityConfigurations;
using MediatR.NotificationPublishers;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System.Reflection;

namespace <#= datasource["SolutionName"] #>.Application;

public static class ApplicationServiceRegistiration
{
    public static IServiceCollection AddApplicationServices(this IServiceCollection services, IConfiguration configuration)
    {
        services.AddAutoMapper(Assembly.GetExecutingAssembly());

        services.AddSubClassesOfType(Assembly.GetExecutingAssembly(), typeof(BaseBusinessRules));

        services.AddValidatorsFromAssembly(Assembly.GetExecutingAssembly());

        services.AddMediatR(configuration =>
        {
            configuration.RegisterServicesFromAssemblies(Assembly.GetExecutingAssembly());

            configuration.AddOpenBehavior(typeof(RequestValidationBehavior<,>));
            configuration.AddOpenBehavior(typeof(TransactionScopeBehavior<,>));
            <#
            WriteLine("");
            if(bool.Parse(datasource["UseCache"].ToString()) == true)
            {
            WriteLine($"\t\t\tconfiguration.AddOpenBehavior(typeof(CachingBehavior<,>));");
            WriteLine($"\t\t\tconfiguration.AddOpenBehavior(typeof(CacheRemovingBehavior<,>));");
            }
            if(bool.Parse(datasource["UseSerilog"].ToString()) == true)
            {
            WriteLine($"\t\t\tconfiguration.AddOpenBehavior(typeof(LoggingBehavior<,>));");
            }
            
            #>
            
            ///Dikkat : Aşagıdaki kod bloğu notificationların asenkron çalışmasını sağlar.
            //Ef core aynı anda 2 istekle database e bağlanırsa hata alacağından dolayı dikkatli olunması gerekir.
            //Database erişiminin ayni anda birden fazla yerde çağırılacagını düşünüyorsanız aşagıdaki kod 3 satırını siliniz.
            configuration.NotificationPublisher = new TaskWhenAllPublisher();
            configuration.NotificationPublisherType = typeof(TaskWhenAllPublisher);
            configuration.Lifetime = ServiceLifetime.Scoped;
        });

        

        return services;

    }

  
    public static IServiceCollection AddSubClassesOfType(
      this IServiceCollection services,
      Assembly assembly,
      Type type,
      Func<IServiceCollection, Type, IServiceCollection>? addWithLifeCycle = null)
    {
        var types = assembly.GetTypes().Where(t => t.IsSubclassOf(type) && type != t).ToList();
        foreach (var item in types)
            if (addWithLifeCycle == null)
                services.AddScoped(item);
            else
                addWithLifeCycle(services, type);
        return services;
    }

}

<#    
FileHelper.CreateAndClearBuilder($"{filePath}/ApplicationServiceRegistiration.cs",this.GenerationEnvironment);
#>