<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ import namespace="System" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ assembly name="Newtonsoft.Json" #>
<#@ assembly name="System.Runtime" #>
<#@ import namespace="System.Runtime" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="Newtonsoft.Json.Linq" #>
<#@ assembly name="_Dependencies\Jumper.Common.dll" #>
<#@ import namespace="Jumper.Common.Constants" #>
<#@ import namespace="Jumper.Common.DirectoryHelpers" #>
<#@ import namespace="Jumper.Common.StringHelpers" #>
<#@ import namespace="Jumper.Common.FileHelpers" #>

<#@ output extension=".cs" #>

<#
    
    string settingsJson = File.ReadAllText(FileSettings.ReadProjectPath);
    var datasource = JObject.Parse(settingsJson);
    var filePath = $"{FileSettings.ProjectCreateDirectory}{datasource["SolutionName"]}/Cqrs/{datasource["SolutionName"]}.Application/Base";
    DirectoryHelper.CreateDirectoryIfNotExists(filePath);
#>

<#= FileSettings.AUTO_GENERATED_MESSAGE #>
using Core.ApiHelpers.JwtHelper.Models;
using Core.CrossCuttingConcerns.Exceptions.Types;
using Core.Persistence.Dynamic;
using Core.Persistence.Models.Responses;
using Core.Persistence.Requests;
using Core.Persistence.Models;

namespace <#= datasource["SolutionName"] #>.Application.Base;

public class BaseBusinessRules
{
    protected readonly TokenParameters TokenParameters;

    public BaseBusinessRules(TokenParameters tokenParameters)
    {
        TokenParameters = tokenParameters;
    }

    public void SetId<TEntity>(TEntity data)
        where TEntity : IEntity<Guid>
    {
        if (data.Id == null || data.Id == Guid.Empty)
            data.Id = Guid.NewGuid();
    }

    public void SetId<TEntity>(List<TEntity> datas)
        where TEntity : IEntity<Guid>
    {
        datas.ForEach(data => data.Id = Guid.NewGuid());    
    }

    public void ThrowExceptionIfDataNull<TEntity>(TEntity? data)
    {
        if (data == null)
            throw new NotFoundException($"{typeof(TEntity).Name} not found");
    }

    public void ThrowExceptionIfDataNullOrEmpty<TEntity>(List<TEntity>? data)
    {
        if (data == null || !data.Any())
            throw new NotFoundException($"{typeof(TEntity).Name} not found");
    }

    public void FillDynamicFilter<T>(ListModel<T> data, DynamicQuery? dq, PageRequest pr)
    {
        data.DynamicQuery = dq ?? new DynamicQuery();
        data.PageRequest = pr;
    }

    public void SetUserId<T>(T data)
        where T : IUserOwnedEntity
    {
        if (TokenParameters.IsSuperUser && data.UserId != Guid.Empty)
            return;

        data.UserId = TokenParameters.UserId;
    }

    public void ThrowExceptionIfDataOwnerNotLoggedUser<T>(T data)
        where T : IUserOwnedEntity
    {
        if (data.UserId == TokenParameters.UserId || TokenParameters.IsSuperUser)
            return;

        throw new BusinessException("Bu veri üzerinde sadece verinin sahibi işlem yapabilir.");
    }

    public void AddLoggedUserIdInDynamicQuery(DynamicQuery? query)
    {
        if (TokenParameters.IsSuperUser)
            return;

        var attach = new Filter { Field = "UserId", Logic = Logic.And, Operator = FilterOperator.Equals, Value = TokenParameters.UserId.ToString() };
        AddFilterInDynamicQuery(query, attach);
    }

    public void AddFilterInDynamicQuery(DynamicQuery? query, Filter attach)
    {
        if (query == null)
        {
            query = new DynamicQuery();

        }
        if (query.Filter == null)
        {
            query.Filter = attach;
        }
        else if (query.Filter.Filters == null)
        {
            query.Filter.Filters = new List<Filter> { attach };
        }
        else
        {
            query.Filter.Filters.Add(attach);
        }
    }

}
<#    
FileHelper.CreateAndClearBuilder($"{filePath}/BaseBusinessRules.cs",this.GenerationEnvironment);
#>