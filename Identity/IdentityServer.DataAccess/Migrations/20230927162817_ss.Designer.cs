// <auto-generated />
using System;
using IdentityServer.DataAccess.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IdentityServer.DataAccess.Migrations
{
    [DbContext(typeof(AuthDbContext))]
    [Migration("20230927162817_ss")]
    partial class ss
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IdentityServer.Entities.Db.ApiResource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("ApiSecret")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("ApiSecretSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ApiResources");
                });

            modelBuilder.Entity("IdentityServer.Entities.Db.ApiResourceScope", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Scope")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("ApiResourceScopes");
                });

            modelBuilder.Entity("IdentityServer.Entities.Db.AuthMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("LanguageCode")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AuthMessages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3dfc5c58-ba4e-4752-a304-b45d5ee86968"),
                            Code = 2,
                            CreateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7689),
                            LanguageCode = 0,
                            Message = "Bu Alan Bosluk Içeremez ve Bos Olamaz !!!",
                            Type = 1,
                            UpdateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7697)
                        },
                        new
                        {
                            Id = new Guid("2c2803e7-78de-4d12-ac53-608ef50d08a0"),
                            Code = 2,
                            CreateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7699),
                            LanguageCode = 1,
                            Message = "This Field Is Required !!! This Field Can Not Contains Space !!!",
                            Type = 1,
                            UpdateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7699)
                        },
                        new
                        {
                            Id = new Guid("b2e72eb3-95ff-4ed1-b790-4e5d94c0dabb"),
                            Code = 0,
                            CreateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7701),
                            LanguageCode = 1,
                            Message = "This Field Is Required !!!",
                            Type = 1,
                            UpdateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7701)
                        },
                        new
                        {
                            Id = new Guid("73a16a1d-6bd7-4494-b67e-a5cf0a5c4495"),
                            Code = 0,
                            CreateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7702),
                            LanguageCode = 0,
                            Message = "Alan Bos Geçilemez !!!",
                            Type = 1,
                            UpdateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7703)
                        },
                        new
                        {
                            Id = new Guid("d02ad221-a522-4059-907e-0f0992e99c39"),
                            Code = 5,
                            CreateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7704),
                            LanguageCode = 1,
                            Message = "Invalid Email !!!",
                            Type = 1,
                            UpdateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7704)
                        },
                        new
                        {
                            Id = new Guid("efe795ad-2373-43f4-9149-afcb40754c6e"),
                            Code = 5,
                            CreateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7705),
                            LanguageCode = 0,
                            Message = "Geçersiz E-posta Adresi !!!",
                            Type = 1,
                            UpdateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7705)
                        },
                        new
                        {
                            Id = new Guid("266d46cf-8f55-4cc3-ac18-f0c1d3143a39"),
                            Code = 4,
                            CreateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7707),
                            LanguageCode = 1,
                            Message = "Your password must contain at least 1 lowercase, 1 uppercase, 1 digit and 1 special character. !!!",
                            Type = 1,
                            UpdateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7707)
                        },
                        new
                        {
                            Id = new Guid("1cc4e354-81b7-47da-a2df-40b81f5f2433"),
                            Code = 4,
                            CreateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7708),
                            LanguageCode = 0,
                            Message = "Şifreniz En Az 1 Küçük, 1 Büyük, 1 Rakam ve 1 özel karakter içermelidir !!!",
                            Type = 1,
                            UpdateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7708)
                        },
                        new
                        {
                            Id = new Guid("2de974f2-2590-4db3-ba40-cbc744e0ac12"),
                            Code = 6,
                            CreateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7711),
                            LanguageCode = 1,
                            Message = "Invalid Phone Number !!!",
                            Type = 1,
                            UpdateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7712)
                        },
                        new
                        {
                            Id = new Guid("fc8065d8-ab03-4a64-a547-3090c557b158"),
                            Code = 6,
                            CreateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7713),
                            LanguageCode = 0,
                            Message = "Geçersiz Telefon Numarası !!!",
                            Type = 1,
                            UpdateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7713)
                        },
                        new
                        {
                            Id = new Guid("f4a80a45-6a75-4f10-8ba5-632a55a4cf67"),
                            Code = 3,
                            CreateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7714),
                            LanguageCode = 1,
                            Message = "Passwords Are Not Same !!!",
                            Type = 1,
                            UpdateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7714)
                        },
                        new
                        {
                            Id = new Guid("bba095bc-9043-493e-97b3-ad89f5c34486"),
                            Code = 3,
                            CreateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7716),
                            LanguageCode = 0,
                            Message = "Şifreler Eşleşmiyor !!!",
                            Type = 1,
                            UpdateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7716)
                        },
                        new
                        {
                            Id = new Guid("b470d9f3-a9f1-4248-9185-4bbe56f9e63a"),
                            Code = 1,
                            CreateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7717),
                            LanguageCode = 1,
                            Message = "This Field Can Not Contains Space !!!",
                            Type = 1,
                            UpdateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7718)
                        },
                        new
                        {
                            Id = new Guid("a02d4be9-c4e0-497f-8f23-0be069d6b49b"),
                            Code = 1,
                            CreateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7719),
                            LanguageCode = 0,
                            Message = "Bu Alan Bosluk Içeremez !!!",
                            Type = 1,
                            UpdateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7719)
                        },
                        new
                        {
                            Id = new Guid("274289fa-fa69-42b3-9aa6-11e875e8bbbb"),
                            Code = 0,
                            CreateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7720),
                            LanguageCode = 1,
                            Message = "Data Not Found !!!",
                            Type = 0,
                            UpdateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7720)
                        },
                        new
                        {
                            Id = new Guid("8c302663-913c-45cf-be1d-40194b51961e"),
                            Code = 0,
                            CreateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7722),
                            LanguageCode = 0,
                            Message = "Veri Bulunamadı !!!",
                            Type = 0,
                            UpdateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7722)
                        },
                        new
                        {
                            Id = new Guid("4aee96a7-4e02-4baf-a909-49cf144cb83e"),
                            Code = 7,
                            CreateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7724),
                            LanguageCode = 1,
                            Message = "Verification Code has been sent !!!",
                            Type = 0,
                            UpdateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7725)
                        },
                        new
                        {
                            Id = new Guid("9e474ddb-7957-4cdc-9a4b-ce808b32db76"),
                            Code = 7,
                            CreateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7726),
                            LanguageCode = 0,
                            Message = "Doğrulama Kodu Gönderildi !!!",
                            Type = 0,
                            UpdateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7726)
                        },
                        new
                        {
                            Id = new Guid("616c2e26-e46a-4ac9-85a0-8465b89ed2cc"),
                            Code = 6,
                            CreateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7727),
                            LanguageCode = 1,
                            Message = "Old Password Is Incorrect !!!",
                            Type = 0,
                            UpdateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7728)
                        },
                        new
                        {
                            Id = new Guid("fd97bdcb-8009-46c8-a42b-06e7c8d161b8"),
                            Code = 6,
                            CreateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7730),
                            LanguageCode = 0,
                            Message = "Eski Şifre Hatalı !!!",
                            Type = 0,
                            UpdateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7730)
                        },
                        new
                        {
                            Id = new Guid("e81c0e16-e387-47f3-b2d1-cd4c64fbef6f"),
                            Code = 2,
                            CreateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7731),
                            LanguageCode = 1,
                            Message = "Interval Error !!!",
                            Type = 0,
                            UpdateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7732)
                        },
                        new
                        {
                            Id = new Guid("735aca87-a458-4b52-a418-59d8ce126119"),
                            Code = 2,
                            CreateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7733),
                            LanguageCode = 0,
                            Message = "Sunucu Içi Hata !!!",
                            Type = 0,
                            UpdateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7733)
                        },
                        new
                        {
                            Id = new Guid("9224643e-b389-4927-887e-e0722f6771a6"),
                            Code = 4,
                            CreateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7735),
                            LanguageCode = 1,
                            Message = "Mail Address Already Taken !!!",
                            Type = 0,
                            UpdateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7735)
                        },
                        new
                        {
                            Id = new Guid("ea32fd1f-bc5a-46a3-b4e7-ee90c5bd17d3"),
                            Code = 4,
                            CreateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7736),
                            LanguageCode = 0,
                            Message = "E-Posta Daha Once Kayıt Edilmiş !!!",
                            Type = 0,
                            UpdateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7736)
                        },
                        new
                        {
                            Id = new Guid("76de7aaf-4cf3-4454-9de5-16f5627af291"),
                            Code = 5,
                            CreateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7739),
                            LanguageCode = 1,
                            Message = "Phone Number Already Taken !!!",
                            Type = 0,
                            UpdateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7739)
                        },
                        new
                        {
                            Id = new Guid("e2436d3d-7175-4bcf-ba39-993da27db662"),
                            Code = 5,
                            CreateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7740),
                            LanguageCode = 0,
                            Message = "Telefon Numarası Daha Onceden Alınmış !!!",
                            Type = 0,
                            UpdateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7740)
                        },
                        new
                        {
                            Id = new Guid("679cb5fe-401d-411b-83b6-ea0fac56fd14"),
                            Code = 1,
                            CreateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7742),
                            LanguageCode = 1,
                            Message = "Success !!!",
                            Type = 0,
                            UpdateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7742)
                        },
                        new
                        {
                            Id = new Guid("893a19c3-e7d0-421f-b72a-b6c7610f9f3d"),
                            Code = 1,
                            CreateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7743),
                            LanguageCode = 0,
                            Message = "Başarılı !!!",
                            Type = 0,
                            UpdateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7744)
                        },
                        new
                        {
                            Id = new Guid("860005b5-3ea8-4821-afee-259a773d1dc8"),
                            Code = 3,
                            CreateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7745),
                            LanguageCode = 1,
                            Message = "User Name Already Taken !!!",
                            Type = 0,
                            UpdateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7745)
                        },
                        new
                        {
                            Id = new Guid("a71a167e-bfa4-4852-8d07-74bddeaeff1c"),
                            Code = 3,
                            CreateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7746),
                            LanguageCode = 0,
                            Message = "Kullanıcı Adı Daha Onceden Alınmış !!!",
                            Type = 0,
                            UpdateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7747)
                        });
                });

            modelBuilder.Entity("IdentityServer.Entities.Db.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ClientSecret")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("ClientSecretSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ClientUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LoginRedirectUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoutRedirectUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8214773a-de51-49f6-82fa-821f780844f7"),
                            ClientId = "jumper",
                            ClientSecret = new byte[] { 130, 162, 123, 243, 194, 177, 126, 70, 174, 168, 239, 45, 253, 190, 208, 195, 167, 126, 110, 19, 210, 248, 31, 138, 73, 27, 32, 10, 170, 173, 125, 230, 174, 131, 62, 20, 217, 157, 188, 45, 72, 125, 148, 123, 31, 15, 64, 179, 216, 102, 49, 231, 71, 221, 53, 98, 77, 225, 101, 16, 236, 23, 95, 167 },
                            ClientSecretSalt = new byte[] { 22, 246, 197, 30, 41, 39, 61, 34, 211, 151, 157, 214, 224, 118, 83, 135, 152, 220, 47, 124, 82, 61, 92, 215, 106, 64, 92, 178, 149, 143, 130, 154, 62, 97, 246, 3, 237, 96, 70, 189, 212, 116, 170, 78, 35, 61, 240, 163, 238, 89, 119, 2, 148, 38, 48, 142, 171, 50, 86, 127, 221, 73, 44, 96, 31, 31, 177, 94, 28, 92, 159, 37, 233, 33, 23, 148, 162, 19, 141, 207, 9, 55, 134, 90, 18, 119, 9, 116, 12, 156, 91, 0, 180, 172, 196, 82, 127, 83, 180, 211, 130, 158, 80, 72, 246, 136, 65, 44, 102, 170, 135, 172, 43, 180, 163, 59, 154, 45, 229, 200, 118, 104, 221, 157, 244, 206, 22, 30 },
                            ClientUrl = "",
                            CreateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7998),
                            LoginRedirectUrl = "/home",
                            LogoUrl = "",
                            LogoutRedirectUrl = "/login",
                            Name = "DemoSite",
                            Status = 200,
                            UpdateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(7998)
                        });
                });

            modelBuilder.Entity("IdentityServer.Entities.Db.ClientApiResource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApiResourceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApiResourceId");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientApiResources");
                });

            modelBuilder.Entity("IdentityServer.Entities.Db.ClientScope", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Scope")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("ClientScopes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("85a5e416-3da0-478e-8f69-a69cc5b14bee"),
                            CreateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(8011),
                            OwnerId = new Guid("8214773a-de51-49f6-82fa-821f780844f7"),
                            Scope = "site_client_scope",
                            UpdateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(8011)
                        });
                });

            modelBuilder.Entity("IdentityServer.Entities.Db.IdentityUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("NormalizedEmail");

                    b.HasIndex("NormalizedUserName");

                    b.ToTable("IdentityUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("763a89cc-c679-4dd4-967e-7509d24ca75a"),
                            ClientId = "jumper",
                            CreateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(8060),
                            Email = "admin@admin.com",
                            Name = "Alper",
                            NormalizedEmail = "admin@admin.com",
                            NormalizedUserName = "admin",
                            PhoneNumber = "5555555555",
                            Status = 200,
                            Surname = "Başda",
                            UpdateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(8060),
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("IdentityServer.Entities.Db.IdentityUserPassword", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("IdentityUserPasswords");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6052badd-7876-48be-9e50-744f8f170359"),
                            CreateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(8091),
                            OwnerId = new Guid("763a89cc-c679-4dd4-967e-7509d24ca75a"),
                            PasswordHash = new byte[] { 219, 184, 223, 88, 64, 57, 202, 105, 40, 165, 197, 163, 161, 104, 58, 254, 29, 128, 184, 150, 76, 75, 86, 164, 132, 186, 213, 89, 213, 100, 82, 191, 20, 69, 123, 174, 79, 171, 39, 227, 101, 167, 94, 116, 101, 193, 219, 180, 189, 106, 176, 33, 35, 245, 152, 25, 121, 1, 74, 60, 100, 180, 207, 130 },
                            PasswordSalt = new byte[] { 166, 99, 125, 110, 172, 211, 23, 127, 13, 239, 175, 160, 73, 204, 149, 250, 141, 99, 56, 155, 95, 186, 85, 203, 234, 182, 147, 90, 190, 234, 63, 47, 41, 30, 57, 192, 7, 231, 206, 57, 227, 247, 225, 4, 70, 204, 42, 25, 63, 49, 32, 182, 233, 23, 3, 13, 209, 141, 81, 26, 173, 113, 250, 3, 25, 99, 65, 176, 109, 113, 6, 15, 31, 35, 232, 9, 35, 174, 139, 80, 91, 182, 139, 32, 135, 129, 45, 42, 219, 211, 87, 0, 1, 10, 54, 254, 132, 60, 224, 85, 24, 20, 78, 176, 11, 9, 131, 68, 209, 127, 200, 215, 227, 170, 156, 205, 32, 145, 162, 227, 52, 128, 34, 154, 166, 107, 170, 137 },
                            UpdateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(8091)
                        });
                });

            modelBuilder.Entity("IdentityServer.Entities.Db.IdentityUserRefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("IdentityUserRefreshTokens");
                });

            modelBuilder.Entity("IdentityServer.Entities.Db.IdentityUserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdentityUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.HasIndex("RoleId");

                    b.ToTable("IdentityUserRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d22870fd-d13e-499f-b0e1-8a340c832c5c"),
                            CreateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(8102),
                            IdentityUserId = new Guid("763a89cc-c679-4dd4-967e-7509d24ca75a"),
                            RoleId = new Guid("37215d8e-1c9b-49f4-8dce-f257185cf989"),
                            UpdateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(8102)
                        });
                });

            modelBuilder.Entity("IdentityServer.Entities.Db.IdentityUserScope", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Scope")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("IdentityUserScopes");
                });

            modelBuilder.Entity("IdentityServer.Entities.Db.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("36215d8e-1c9b-49f4-8dce-f257185cf989"),
                            CreateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(8026),
                            Name = "Manager",
                            UpdateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(8027)
                        },
                        new
                        {
                            Id = new Guid("34215d8e-1c9b-49f4-8dce-f257185cf989"),
                            CreateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(8027),
                            Name = "Personnel",
                            UpdateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(8028)
                        },
                        new
                        {
                            Id = new Guid("37215d8e-1c9b-49f4-8dce-f257185cf989"),
                            CreateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(8028),
                            Name = "Admin",
                            UpdateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(8029)
                        },
                        new
                        {
                            Id = new Guid("35215d8e-1c9b-49f4-8dce-f257185cf989"),
                            CreateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(8029),
                            Name = "User",
                            UpdateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(8030)
                        });
                });

            modelBuilder.Entity("IdentityServer.Entities.Db.RoleScope", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Scope")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("RoleScopes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("93badf40-ae89-445e-933c-ab496dcffce5"),
                            CreateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(8041),
                            OwnerId = new Guid("37215d8e-1c9b-49f4-8dce-f257185cf989"),
                            Scope = "admin_user_scope",
                            UpdateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(8041)
                        },
                        new
                        {
                            Id = new Guid("b44a87d5-4897-4bbf-bc1b-936d7dda35fe"),
                            CreateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(8044),
                            OwnerId = new Guid("35215d8e-1c9b-49f4-8dce-f257185cf989"),
                            Scope = "user_role_scope",
                            UpdateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(8044)
                        },
                        new
                        {
                            Id = new Guid("a57d879c-fae1-41c7-bf27-bc80808b0fe0"),
                            CreateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(8046),
                            OwnerId = new Guid("36215d8e-1c9b-49f4-8dce-f257185cf989"),
                            Scope = "manager_role_scope",
                            UpdateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(8046)
                        },
                        new
                        {
                            Id = new Guid("6aa5971c-b4bc-49b8-81b2-382b5ddae597"),
                            CreateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(8049),
                            OwnerId = new Guid("34215d8e-1c9b-49f4-8dce-f257185cf989"),
                            Scope = "personnel_role_scope",
                            UpdateTime = new DateTime(2023, 9, 27, 19, 28, 17, 755, DateTimeKind.Local).AddTicks(8049)
                        });
                });

            modelBuilder.Entity("IdentityServer.Entities.Db.ApiResourceScope", b =>
                {
                    b.HasOne("IdentityServer.Entities.Db.ApiResource", "ApiResource")
                        .WithMany("ApiResourceScopes")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApiResource");
                });

            modelBuilder.Entity("IdentityServer.Entities.Db.ClientApiResource", b =>
                {
                    b.HasOne("IdentityServer.Entities.Db.ApiResource", "ApiResource")
                        .WithMany("ClientApiResources")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityServer.Entities.Db.Client", "Client")
                        .WithMany("ClientApiResources")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApiResource");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("IdentityServer.Entities.Db.ClientScope", b =>
                {
                    b.HasOne("IdentityServer.Entities.Db.Client", "Client")
                        .WithMany("ClientScopes")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("IdentityServer.Entities.Db.IdentityUserPassword", b =>
                {
                    b.HasOne("IdentityServer.Entities.Db.IdentityUser", "User")
                        .WithMany("IdentityUserPasswords")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdentityServer.Entities.Db.IdentityUserRefreshToken", b =>
                {
                    b.HasOne("IdentityServer.Entities.Db.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdentityServer.Entities.Db.IdentityUserRole", b =>
                {
                    b.HasOne("IdentityServer.Entities.Db.IdentityUser", "IdentityUser")
                        .WithMany("IdentityUserRoles")
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityServer.Entities.Db.Role", "Role")
                        .WithMany("IdentityUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUser");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("IdentityServer.Entities.Db.IdentityUserScope", b =>
                {
                    b.HasOne("IdentityServer.Entities.Db.IdentityUser", "IdentityUser")
                        .WithMany("IdentityUserScopes")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("IdentityServer.Entities.Db.RoleScope", b =>
                {
                    b.HasOne("IdentityServer.Entities.Db.Role", "Role")
                        .WithMany("RoleScopes")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("IdentityServer.Entities.Db.ApiResource", b =>
                {
                    b.Navigation("ApiResourceScopes");

                    b.Navigation("ClientApiResources");
                });

            modelBuilder.Entity("IdentityServer.Entities.Db.Client", b =>
                {
                    b.Navigation("ClientApiResources");

                    b.Navigation("ClientScopes");
                });

            modelBuilder.Entity("IdentityServer.Entities.Db.IdentityUser", b =>
                {
                    b.Navigation("IdentityUserPasswords");

                    b.Navigation("IdentityUserRoles");

                    b.Navigation("IdentityUserScopes");
                });

            modelBuilder.Entity("IdentityServer.Entities.Db.Role", b =>
                {
                    b.Navigation("IdentityUserRoles");

                    b.Navigation("RoleScopes");
                });
#pragma warning restore 612, 618
        }
    }
}
