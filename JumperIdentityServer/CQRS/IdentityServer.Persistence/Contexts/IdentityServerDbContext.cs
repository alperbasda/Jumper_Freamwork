


//---------------------------------------------------------------------------------------
//      This code was generated by a Jumper tool. 
//      Runtime version : 1.0
//      Generation Time : 23.10.2023 11:28
//---------------------------------------------------------------------------------------

using IdentityServer.Domain.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using System.Reflection;

namespace IdentityServer.Persistence.Contexts;

public class IdentityServerDbContext : DbContext
{
    protected IConfiguration Configuration { get; set; }

    public IdentityServerDbContext(DbContextOptions dbContextOptions, IConfiguration configuration) : base(dbContextOptions)
    {
        Configuration = configuration;
        Database.EnsureCreated();
    }

    
	public virtual DbSet<UserScope> UserScopes { get; set; }

	public virtual DbSet<ClientScope> ClientScopes { get; set; }

	public virtual DbSet<UserRefreshToken> UserRefreshTokens { get; set; }

	public virtual DbSet<Client> Clients { get; set; }

	public virtual DbSet<AuthMessages> AuthMessageses { get; set; }

	public virtual DbSet<User> Users { get; set; }

	public virtual DbSet<Role> Roles { get; set; }

	public virtual DbSet<ApiResource> ApiResources { get; set; }

	public virtual DbSet<RoleScope> RoleScopes { get; set; }

	public virtual DbSet<ApiResourceClientRelation> ApiResourceClientRelations { get; set; }

	public virtual DbSet<ApiResourceScope> ApiResourceScopes { get; set; }

	public virtual DbSet<ClientUserRelation> ClientUserRelations { get; set; }

	public virtual DbSet<UserPassword> UserPasswords { get; set; }

	public virtual DbSet<RoleUserRelation> RoleUserRelations { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        //N-N İlişkiler burada ele alınmıştır.
        
		modelBuilder.Entity<ApiResourceClientRelation>().HasOne(w => w.Client).WithMany(w => w.ApiResources).HasForeignKey(w => w.ClientId).OnDelete(DeleteBehavior.Restrict);
		modelBuilder.Entity<ApiResourceClientRelation>().HasOne(w => w.ApiResource).WithMany(w => w.Clients).HasForeignKey(w => w.ApiResourceId).OnDelete(DeleteBehavior.Restrict);

		modelBuilder.Entity<ClientUserRelation>().HasOne(w => w.User).WithMany(w => w.Clients).HasForeignKey(w => w.UserId).OnDelete(DeleteBehavior.Restrict);
		modelBuilder.Entity<ClientUserRelation>().HasOne(w => w.Client).WithMany(w => w.Users).HasForeignKey(w => w.ClientId).OnDelete(DeleteBehavior.Restrict);

		modelBuilder.Entity<RoleUserRelation>().HasOne(w => w.User).WithMany(w => w.Roles).HasForeignKey(w => w.UserId).OnDelete(DeleteBehavior.Restrict);
		modelBuilder.Entity<RoleUserRelation>().HasOne(w => w.Role).WithMany(w => w.Users).HasForeignKey(w => w.RoleId).OnDelete(DeleteBehavior.Restrict);

        modelBuilder.ApplyConfigurationsFromAssembly(Assembly.GetExecutingAssembly());
    }


}

