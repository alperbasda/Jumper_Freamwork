//----------- ----------------------------------------------------------------------------
//      This code was generated by a Jumper template tool. 
//---------------------------------------------------------------------------------------
using IdentityServer.Application.Features.Auth.Commands.Login;
using IdentityServer.Application.Features.Auth.Rules;
using IdentityServer.Application.Features.UserPasswords.Queries.GetByUserId;
using IdentityServer.Application.Features.UserRefreshTokens.Commands.Create;
using IdentityServer.Application.Features.UserRefreshTokens.Commands.DeleteByUserId;
using IdentityServer.Application.Helpers;
using IdentityServer.Application.Services.Repositories;
using MediatR;
using Microsoft.EntityFrameworkCore;


namespace IdentityServer.Application.Features.Auth.Handlers.Login;

public class LoginCommandHandler : IRequestHandler<LoginCommand, LoginResponse>
{
    private readonly IMediator _mediator;
    private readonly IUserDal _userDal;
    private readonly AuthBusinessRules _authBusinessRules;
    private readonly TokenHelper _tokenHelper;

    public LoginCommandHandler(AuthBusinessRules authBusinessRules, IMediator mediator, TokenHelper tokenHelper, IUserDal userDal)
    {
        _authBusinessRules = authBusinessRules;
        _mediator = mediator;
        _tokenHelper = tokenHelper;
        _userDal = userDal;
    }

    public async Task<LoginResponse> Handle(LoginCommand request, CancellationToken cancellationToken)
    {
        var user = await _userDal.GetAsync(w => w.NormalizedUserName == request.UserName.ToLower(),
            include: w => w
                            .Include(q => q.Clients.Where(w => w.DeletedTime == null))
                            .Include(q => q.UserScopes.Where(w => w.DeletedTime == null))
                            .Include(q => q.Roles.Where(w => w.DeletedTime == null)), cancellationToken: cancellationToken, enableTracking: false);

        _authBusinessRules.ThrowExceptionIfDataNull(user);

        _ = await _mediator.Send(new GetByUserIdUserPasswordQuery { UserId = user!.Id, PasswordStr = request.Password });

        await _authBusinessRules.FillAllScope(user);

        var token = await _tokenHelper.CreateUserToken(user);
        _ = await _mediator.Send(new DeleteByUserIdRefreshTokenCommand { UserId = user.Id });
        _ = await _mediator.Send(new CreateUserRefreshTokenCommand { Code = token.RefreshToken, Expiration = DateTime.Now.AddDays(7), UserId = user.Id });
        return token;

    }
}
