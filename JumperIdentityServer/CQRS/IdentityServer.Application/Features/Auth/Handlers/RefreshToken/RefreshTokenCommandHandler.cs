//---------------------------------------------------------------------------------------
//      This code was generated by a Jumper template tool. 
//---------------------------------------------------------------------------------------
using IdentityServer.Application.Features.Auth.Commands.RefreshToken;
using IdentityServer.Application.Features.Auth.Rules;
using IdentityServer.Application.Helpers;
using IdentityServer.Application.Services.Repositories;
using MediatR;
using Microsoft.EntityFrameworkCore;

namespace IdentityServer.Application.Features.Auth.Handlers.RefreshToken;

public class RefreshTokenCommandHandler : IRequestHandler<RefreshTokenCommand, RefreshTokenResponse>
{
    AuthBusinessRules _authBusinessRules;
    IUserRefreshTokenDal _userRefreshTokenDal;
    TokenHelper _tokenHelper;
    IUserDal _userDal;
    public RefreshTokenCommandHandler(AuthBusinessRules authBusinessRules, IUserRefreshTokenDal userRefreshTokenDal, IUserDal userDal, TokenHelper tokenHelper)
    {
        _authBusinessRules = authBusinessRules;
        _userRefreshTokenDal = userRefreshTokenDal;
        _userDal = userDal;
        _tokenHelper = tokenHelper;
    }

    public async Task<RefreshTokenResponse> Handle(RefreshTokenCommand request, CancellationToken cancellationToken)
    {
        var refreshTokenResponse = await _userRefreshTokenDal.GetAsync(w => w.Code == request.RefreshToken && w.Expiration >= DateTime.Now);

        _authBusinessRules.ThrowExceptionIfDataNull(refreshTokenResponse);

        var user = await _userDal.GetAsync(w => w.Id == refreshTokenResponse!.UserId, include: w => w.Include(q => q.Clients).Include(q => q.UserScopes).Include(q => q.Roles), cancellationToken: cancellationToken,enableTracking:false);

        _authBusinessRules.ThrowExceptionIfDataNull(user);

        await _authBusinessRules.FillAllScope(user!);

        var newToken = await _tokenHelper.CreateUserTokenForRefreshToken(user!);
        
        refreshTokenResponse!.Code = newToken.RefreshToken;
        refreshTokenResponse!.Expiration = newToken.RefreshTokenExpiration;

        await _userRefreshTokenDal.UpdateAsync(refreshTokenResponse);

        return newToken;
    }
}
