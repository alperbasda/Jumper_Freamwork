//---------------------------------------------------------------------------------------
//      This code was generated by a Jumper template tool. 
//---------------------------------------------------------------------------------------
using Core.ApiHelpers.JwtHelper.Models;
using Core.CrossCuttingConcerns.Exceptions.Types;
using Core.Persistence.Models.Responses;
using IdentityServer.Application.Base;
using IdentityServer.Application.Features.Auth.Commands.Login;
using IdentityServer.Application.Features.Auth.Commands.RefreshToken;
using IdentityServer.Application.Services.Repositories;
using IdentityServer.Domain.Entities;

namespace IdentityServer.Application.Features.Auth.Rules;

public class AuthBusinessRules : BaseBusinessRules
{
    public const string LoginUrl = "/Auth/Login";
    IRoleScopeDal _roleScopeDal;
    public AuthBusinessRules(TokenParameters tokenParameters, IRoleScopeDal roleScopeDal) : base(tokenParameters)
    {
        _roleScopeDal = roleScopeDal;
    }
    public void ThrowExceptionIfLoginFailed(Response<LoginResponse> response)
    {
        if (!response.IsSuccessful)
        {
            throw new AuthorizationException(LoginUrl, string.Join("<br/>", response.Errors));
        }
    }

    public void ThrowExceptionIfLoginFailed(Response<RefreshTokenResponse> response)
    {
        if (!response.IsSuccessful)
        {
            throw new AuthorizationException(LoginUrl, string.Join("<br/>", response.Errors));
        }
    }

    public async Task FillAllScope(User user)
    {
        user.UserScopes = user.UserScopes.Where(w => w.Expiration == null || w.Expiration > DateTime.Now).ToList();

        if (user.Roles != null && user.Roles.Any())
        {
            var allRoles = user.Roles.Select(w => w.RoleId).ToList();
            var roleScopes = (await _roleScopeDal.GetListAsync(w => allRoles.Contains(w.RoleId))).Items.ToList();
            roleScopes.Where(w => w.Expiration == null || w.Expiration > DateTime.Now).Select(w => new UserScope
            {
                
                CreatedTime = w.CreatedTime,
                UpdatedTime = w.UpdatedTime,
                Expiration = w.Expiration,
                UserId = user.Id,
                Scope = w.Scope,
                Id = w.Id
            }).ToList()
            .ForEach(user.UserScopes.Add);
        }
    }

}
