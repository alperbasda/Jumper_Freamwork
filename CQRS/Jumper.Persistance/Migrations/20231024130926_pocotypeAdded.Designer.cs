// <auto-generated />
using System;
using Jumper.Persistance.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Jumper.Persistance.Migrations
{
    [DbContext(typeof(JumperDbContext))]
    [Migration("20231024130926_pocotypeAdded")]
    partial class pocotypeAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Jumper.Domain.Entities.EntityDefinition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedTime");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedTime");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("DeletedTime");

                    b.HasIndex("UserId");

                    b.ToTable("EntityDefinitions", (string)null);
                });

            modelBuilder.Entity("Jumper.Domain.Entities.EntityPropertyDefinition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedTime");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedTime");

                    b.Property<Guid>("EntityDefinitionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("EntityDefinitionId");

                    b.Property<bool>("HasIndex")
                        .HasColumnType("bit");

                    b.Property<bool>("IsConstant")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUnique")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<int>("PropertyPocoType")
                        .HasColumnType("int")
                        .HasColumnName("PropertyPocoType");

                    b.Property<string>("PropertyTypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PropertyTypeCode");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedTime");

                    b.HasKey("Id");

                    b.HasIndex("DeletedTime");

                    b.HasIndex("EntityDefinitionId");

                    b.ToTable("EntityPropertyDefinitions", (string)null);
                });

            modelBuilder.Entity("Jumper.Domain.Entities.ProjectEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedTime");

                    b.Property<int>("DatabaseType")
                        .HasColumnType("int")
                        .HasColumnName("DatabaseType");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedTime");

                    b.Property<bool>("IsConstant")
                        .HasColumnType("bit")
                        .HasColumnName("IsConstant");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<Guid>("ProjectDeclarationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProjectDeclarationId");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedTime");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("DeletedTime");

                    b.HasIndex("ProjectDeclarationId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectEntities", (string)null);
                });

            modelBuilder.Entity("Jumper.Domain.Entities.ProjectEntityAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<bool>("CacheEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("CacheEnabled");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedTime");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedTime");

                    b.Property<int>("EntityAction")
                        .HasColumnType("int")
                        .HasColumnName("EntityAction");

                    b.Property<bool>("IsConstant")
                        .HasColumnType("bit")
                        .HasColumnName("IsConstant");

                    b.Property<bool>("LogEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("LogEnabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<Guid>("ProjectEntityId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProjectEntityId");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedTime");

                    b.HasKey("Id");

                    b.HasIndex("DeletedTime");

                    b.HasIndex("ProjectEntityId");

                    b.ToTable("ProjectEntityActions", (string)null);
                });

            modelBuilder.Entity("Jumper.Domain.Entities.ProjectEntityActionProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<int>("ActionPropertyType")
                        .HasColumnType("int")
                        .HasColumnName("ActionPropertyType");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedTime");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedTime");

                    b.Property<bool>("IsConstant")
                        .HasColumnType("bit")
                        .HasColumnName("IsConstant");

                    b.Property<Guid>("ProjectEntityActionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProjectEntityActionId");

                    b.Property<Guid?>("ProjectEntityPropertyId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProjectEntityPropertyId");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedTime");

                    b.HasKey("Id");

                    b.HasIndex("DeletedTime");

                    b.HasIndex("ProjectEntityActionId");

                    b.HasIndex("ProjectEntityPropertyId");

                    b.ToTable("ProjectEntityActionProperties", (string)null);
                });

            modelBuilder.Entity("Jumper.Domain.Entities.ProjectEntityDependency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedTime");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedTime");

                    b.Property<Guid?>("DependedId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DependedId");

                    b.Property<Guid?>("DependsOnId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DependsOnId");

                    b.Property<int>("EntityDependencyType")
                        .HasColumnType("int")
                        .HasColumnName("EntityDependencyType");

                    b.Property<Guid>("ProjectDeclarationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProjectDeclarationId");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedTime");

                    b.HasKey("Id");

                    b.HasIndex("DependedId");

                    b.HasIndex("DependsOnId");

                    b.HasIndex("ProjectDeclarationId");

                    b.ToTable("ProjectEntityDependencies", (string)null);
                });

            modelBuilder.Entity("Jumper.Domain.Entities.ProjectEntityProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedTime");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedTime");

                    b.Property<bool>("HasIndex")
                        .HasColumnType("bit")
                        .HasColumnName("HasIndex");

                    b.Property<bool>("IsConstant")
                        .HasColumnType("bit")
                        .HasColumnName("IsConstant");

                    b.Property<bool>("IsUnique")
                        .HasColumnType("bit")
                        .HasColumnName("IsUnique");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectEntityId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProjectEntityId");

                    b.Property<int>("PropertyPocoType")
                        .HasColumnType("int")
                        .HasColumnName("PropertyPocoType");

                    b.Property<string>("PropertyTypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PropertyTypeCode");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedTime");

                    b.HasKey("Id");

                    b.HasIndex("DeletedTime");

                    b.HasIndex("ProjectEntityId");

                    b.ToTable("ProjectEntityProperties", (string)null);
                });

            modelBuilder.Entity("Jumper.Domain.Entities.PropertyTypeDeclaration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Code");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedTime");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedTime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedTime");

                    b.HasKey("Id");

                    b.HasIndex("DeletedTime");

                    b.ToTable("PropertyTypeDeclarations", (string)null);
                });

            modelBuilder.Entity("Jumper.Domain.Entities.EntityPropertyDefinition", b =>
                {
                    b.HasOne("Jumper.Domain.Entities.EntityDefinition", "EntityDefinition")
                        .WithMany("EntityPropertyDefinitions")
                        .HasForeignKey("EntityDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityDefinition");
                });

            modelBuilder.Entity("Jumper.Domain.Entities.ProjectEntityAction", b =>
                {
                    b.HasOne("Jumper.Domain.Entities.ProjectEntity", "ProjectEntity")
                        .WithMany("ProjectEntityActions")
                        .HasForeignKey("ProjectEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectEntity");
                });

            modelBuilder.Entity("Jumper.Domain.Entities.ProjectEntityActionProperty", b =>
                {
                    b.HasOne("Jumper.Domain.Entities.ProjectEntityAction", "ProjectEntityAction")
                        .WithMany("Properties")
                        .HasForeignKey("ProjectEntityActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Jumper.Domain.Entities.ProjectEntityProperty", "ProjectEntityProperty")
                        .WithMany("Metods")
                        .HasForeignKey("ProjectEntityPropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProjectEntityAction");

                    b.Navigation("ProjectEntityProperty");
                });

            modelBuilder.Entity("Jumper.Domain.Entities.ProjectEntityDependency", b =>
                {
                    b.HasOne("Jumper.Domain.Entities.ProjectEntity", "DependedEntity")
                        .WithMany("Depended")
                        .HasForeignKey("DependedId");

                    b.HasOne("Jumper.Domain.Entities.ProjectEntity", "DependsOnEntity")
                        .WithMany("DependsOn")
                        .HasForeignKey("DependsOnId");

                    b.Navigation("DependedEntity");

                    b.Navigation("DependsOnEntity");
                });

            modelBuilder.Entity("Jumper.Domain.Entities.ProjectEntityProperty", b =>
                {
                    b.HasOne("Jumper.Domain.Entities.ProjectEntity", "ProjectEntity")
                        .WithMany("Properties")
                        .HasForeignKey("ProjectEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectEntity");
                });

            modelBuilder.Entity("Jumper.Domain.Entities.EntityDefinition", b =>
                {
                    b.Navigation("EntityPropertyDefinitions");
                });

            modelBuilder.Entity("Jumper.Domain.Entities.ProjectEntity", b =>
                {
                    b.Navigation("Depended");

                    b.Navigation("DependsOn");

                    b.Navigation("ProjectEntityActions");

                    b.Navigation("Properties");
                });

            modelBuilder.Entity("Jumper.Domain.Entities.ProjectEntityAction", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("Jumper.Domain.Entities.ProjectEntityProperty", b =>
                {
                    b.Navigation("Metods");
                });
#pragma warning restore 612, 618
        }
    }
}
