<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ import namespace="System" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ assembly name="Newtonsoft.Json" #>
<#@ assembly name="System.Runtime" #>
<#@ import namespace="System.Runtime" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="Newtonsoft.Json.Linq" #>
<#@ assembly name="_Dependencies\Jumper.CodeGenerator.Helpers.dll" #>
<#@ import namespace="Jumper.CodeGenerator.Helpers.Constants" #>
<#@ import namespace="Jumper.CodeGenerator.Helpers.DirectoryHelpers" #>
<#@ import namespace="Jumper.CodeGenerator.Helpers.StringHelpers" #>
<#@ import namespace="Jumper.CodeGenerator.Helpers.FileHelpers" #>
<#@ output extension=".cs" #>

<#
    string settingsJson = File.ReadAllText(FileSettings.ReadProjectPath);
    var datasource = JObject.Parse(settingsJson);
    var filePath = $"{FileSettings.ProjectCreateDirectory}{datasource["SolutionName"]}/Presentation/{datasource["SolutionName"]}.UI.Api/Middlewares";
    DirectoryHelper.CreateDirectoryIfNotExists(filePath);
#>
<#= FileSettings.AUTO_GENERATED_MESSAGE #>
using Core.ApiHelpers.JwtHelper.Models;
using Core.CrossCuttingConcerns.Serilog.Logger;
using Core.CrossCuttingConcerns.Serilog;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace <#= datasource["SolutionName"] #>.UI.Api.Middlewares;

public static class AddApiRegistrationServices
{
    public static IServiceCollection AddApiServices(this IServiceCollection services, IConfiguration configuration)
    {
        services.AddScoped<TokenParameters>();
        <#
        WriteLine("");
        if(datasource["SeriLogConfigurations"]["ElasticLogConfiguration"] != null && string.IsNullOrEmpty(datasource["SeriLogConfigurations"]["ElasticLogConfiguration"]["Uri"].Value<string?>()))
        {
        WriteLine("\t\tservices.AddTransient<LoggerServiceBase, ElasticLogger>();");
        }
        else if(datasource["SeriLogConfigurations"]["FileLogConfiguration"] != null && !string.IsNullOrEmpty(datasource["SeriLogConfigurations"]["FileLogConfiguration"]["FolderPath"].Value<string?>()))
        {
        WriteLine("\t\tservices.AddTransient<LoggerServiceBase, FileLogger>();");
        }
        else if(datasource["SeriLogConfigurations"]["MsSqlLogConfiguration"] != null)
        {
        WriteLine("\t\t//Şimdilik Databaseloggeri destekleyemiyoruz.");
        }
        #>
        services.AddTransient<LoggerServiceBase, FileLogger>();
        return services;
    }

}

<#    
FileHelper.CreateAndClearBuilder($"{filePath}/ApiRegistrationService.cs",this.GenerationEnvironment);

#>