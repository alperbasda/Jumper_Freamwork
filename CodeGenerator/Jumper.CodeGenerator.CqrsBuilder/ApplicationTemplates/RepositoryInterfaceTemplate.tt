<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ import namespace="System" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ assembly name="Newtonsoft.Json" #>
<#@ assembly name="System.Runtime" #>
<#@ import namespace="System.Runtime" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="Newtonsoft.Json.Linq" #>
<#@ assembly name="_Dependencies\Jumper.CodeGenerator.Helpers.dll" #>
<#@ import namespace="Jumper.CodeGenerator.Helpers.Constants" #>
<#@ import namespace="Jumper.CodeGenerator.Helpers.DirectoryHelpers" #>
<#@ import namespace="Jumper.CodeGenerator.Helpers.StringHelpers" #>
<#@ import namespace="Jumper.CodeGenerator.Helpers.FileHelpers" #>

<#@ output extension=".cs" #>

<#
    
    string settingsJson = File.ReadAllText(FileSettings.ReadProjectPath);
    var datasource = JObject.Parse(settingsJson);
    var filePath = $"{FileSettings.ProjectCreateDirectory}{datasource["SolutionName"]}/Cqrs/{datasource["SolutionName"]}.Application/Services/Repositories";
    DirectoryHelper.CreateDirectoryIfNotExists(filePath);
#>

<#

var entities = datasource["Entities"];
foreach (var item in entities!)
{
#>
<#= FileSettings.AUTO_GENERATED_MESSAGE #>
using Core.Persistence.Repositories;
<#
if(item["DatabaseType"].ToString() !="4")
{
WriteLine($"using {datasource["SolutionName"]}.Domain.Entities;");
}
else
{
WriteLine($"using {datasource["SolutionName"]}.Domain.MongoEntities;");
}
#>
namespace <#= datasource["SolutionName"] #>.Application.Services.Repositories;

public interface I<#= item["Name"] #>Dal : IAsyncRepository<<#= item["Name"] #>, Guid>
{
}


<#    
FileHelper.CreateAndClearBuilder($"{filePath}/I{item["Name"]}Dal.cs",this.GenerationEnvironment);
}
#>