<#@ import namespace="System.IO" #>
<#@ assembly name="Newtonsoft.Json" #>
<#@ assembly name="System.Runtime" #>
<#@ import namespace="System.Runtime" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="Newtonsoft.Json.Linq" #>
<#@ assembly name="_Dependencies\Jumper.CodeGenerator.Helpers.dll" #>
<#@ import namespace="Jumper.CodeGenerator.Helpers.Constants" #>
<#@ import namespace="Jumper.CodeGenerator.Helpers.DirectoryHelpers" #>
<#@ import namespace="Jumper.CodeGenerator.Helpers.StringHelpers" #>
<#@ import namespace="Jumper.CodeGenerator.Helpers.FileHelpers" #>

<#@ output extension=".cs" #>

<#
    
    string settingsJson = File.ReadAllText(FileSettings.ReadProjectPath);
    var datasource = JObject.Parse(settingsJson);
#>

<#
foreach (var entity in datasource["Entities"])
{
foreach(var action in entity["Actions"].Where(w => ProjectSettings.CudActionTypes.Contains(w["EntityAction"].ToString())))
{
var filePath = $"{FileSettings.ProjectCreateDirectory}{datasource["SolutionName"]}/Cqrs/{datasource["SolutionName"]}.Application/Features/{entity["Name"].ToString().ToPlural()}/Commands/{action["Name"]}";
DirectoryHelper.CreateDirectoryIfNotExists(filePath);
#>
<#= FileSettings.AUTO_GENERATED_MESSAGE #>
using FluentValidation;
namespace <#= datasource["SolutionName"] #>.Application.Features.<#= entity["Name"].ToString().ToPlural() #>.Commands.<#= action["Name"] #>;

public class <#= action["Name"] #><#= entity["Name"] #>CommandValidator : AbstractValidator<<#= action["Name"] #><#= entity["Name"] #>Command>
{
    public <#= action["Name"] #><#= entity["Name"] #>CommandValidator()
    {
         <#
         WriteLine("");
         foreach(var prop in action["Properties"].Where(w=>w["ActionPropertyType"].ToString() == "0"))
         {
         if(ProjectSettings.RequestExculededProperties.Contains(prop["PropertyName"].ToString()) || prop["PropertyTypeCode"].ToString().Contains("?") || prop["PropertyName"].ToString() == "Id")
         {
         continue;
         }
         WriteLine($"\tRuleFor(w => w.{prop["PropertyName"].ToString()}).NotEmpty().NotNull().WithMessage(\"Lütfen {prop["PropertyName"].ToString()} Alanını Doldurun veya Seçin.\");");
         }
         #>

        
    }
}





<#    
FileHelper.CreateAndClearBuilder($"{filePath}/{action["Name"]}{entity["Name"]}CommandValidator.cs",this.GenerationEnvironment);
}
}
#>