<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ import namespace="System" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ assembly name="Newtonsoft.Json" #>
<#@ assembly name="System.Runtime" #>
<#@ import namespace="System.Runtime" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="Newtonsoft.Json.Linq" #>
<#@ assembly name="_Dependencies\Jumper.CodeGenerator.Helpers.dll" #>
<#@ import namespace="Jumper.CodeGenerator.Helpers.Constants" #>
<#@ import namespace="Jumper.CodeGenerator.Helpers.DirectoryHelpers" #>
<#@ import namespace="Jumper.CodeGenerator.Helpers.StringHelpers" #>
<#@ import namespace="Jumper.CodeGenerator.Helpers.FileHelpers" #>
<#@ output extension=".cs" #>


<#
    string settingsJson = File.ReadAllText(FileSettings.ReadProjectPath);
    var datasource = JObject.Parse(settingsJson);
    var filePath = $"{FileSettings.ProjectCreateDirectory}{datasource["SolutionName"]}/Cqrs/{datasource["SolutionName"]}.Persistence/Contexts";
    DirectoryHelper.CreateDirectoryIfNotExists(filePath);
#>
<#= FileSettings.AUTO_GENERATED_MESSAGE #>
using <#= datasource["SolutionName"] #>.Domain.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using System.Reflection;

namespace <#= datasource["SolutionName"] #>.Persistence.Contexts;

public class <#= datasource["SolutionName"] #>DbContext : DbContext
{
    protected IConfiguration Configuration { get; set; }

    public <#= datasource["SolutionName"] #>DbContext(DbContextOptions dbContextOptions, IConfiguration configuration) : base(dbContextOptions)
    {
        Configuration = configuration;
        Database.EnsureCreated();
    }

    <#

    foreach(var item in datasource["Entities"].Where(w => w["DatabaseType"]!.ToString() != "4"))
    {
    WriteLine("");
    WriteLine($"\tpublic virtual DbSet<{item["Name"]}> {item["Name"].ToString().ToPlural()} {{ get; set; }}");
    
    }

    #>

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        //N-N İlişkiler burada ele alınmıştır.
        <#
        foreach (var dependency in datasource["Relations"].Where(w => w["EntityDependencyType"].ToString() == "2"))
        {
            var relationTableName = StringHelper.GetRelationTableName(dependency["DependedName"].ToString(),dependency["DependsOnName"].ToString());
            
            WriteLine("");
            WriteLine($"\t\tmodelBuilder.Entity<{relationTableName}>().HasOne(w => w.{dependency["DependedName"]}).WithMany(w => w.{dependency["DependsOnName"].ToString().ToPlural()}).HasForeignKey(w => w.{dependency["DependsOnName"]}Id).OnDelete(DeleteBehavior.Restrict);");
            WriteLine($"\t\tmodelBuilder.Entity<{relationTableName}>().HasOne(w => w.{dependency["DependsOnName"]}).WithMany(w => w.{dependency["DependedName"].ToString().ToPlural()}).HasForeignKey(w => w.{dependency["DependedName"]}Id).OnDelete(DeleteBehavior.Restrict);");
        }

        #>

        modelBuilder.ApplyConfigurationsFromAssembly(Assembly.GetExecutingAssembly());
    }


}

<#    
FileHelper.CreateAndClearBuilder($"{filePath}/{datasource["SolutionName"]}DbContext.cs",this.GenerationEnvironment);

#>



