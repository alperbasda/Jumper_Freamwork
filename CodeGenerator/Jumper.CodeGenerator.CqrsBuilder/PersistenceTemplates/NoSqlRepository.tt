<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ import namespace="System" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ assembly name="Newtonsoft.Json" #>
<#@ assembly name="System.Runtime" #>
<#@ import namespace="System.Runtime" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="Newtonsoft.Json.Linq" #>
<#@ assembly name="_Dependencies\Jumper.CodeGenerator.Helpers.dll" #>
<#@ import namespace="Jumper.CodeGenerator.Helpers.Constants" #>
<#@ import namespace="Jumper.CodeGenerator.Helpers.DirectoryHelpers" #>
<#@ import namespace="Jumper.CodeGenerator.Helpers.StringHelpers" #>
<#@ import namespace="Jumper.CodeGenerator.Helpers.FileHelpers" #>
<#@ output extension=".cs" #>


<#
    
    string settingsJson = File.ReadAllText(FileSettings.ReadProjectPath);
    var datasource = JObject.Parse(settingsJson);
    var filePath = $"{FileSettings.ProjectCreateDirectory}{datasource["SolutionName"]}/Cqrs/{datasource["SolutionName"]}.Persistence/Repositories";
    DirectoryHelper.CreateDirectoryIfNotExists(filePath);
#>


<#

var entities = datasource["Entities"].Where(w => w["DatabaseType"]!.ToString() == "4");
foreach (var item in entities!)
{
#>
<#= FileSettings.AUTO_GENERATED_MESSAGE #>
using Core.Persistence.Models;
using <#= datasource["SolutionName"] #>.Application.Services.Repositories;
using <#= datasource["SolutionName"] #>.Domain.MongoEntities;
using MongoDbAdapter.Repository;
namespace <#= datasource["SolutionName"] #>.Persistence.Repositories;

public class <#= item["Name"] #>Dal : MongoRepositoryBase<<#= item["Name"] #>, Guid>, I<#= item["Name"] #>Dal
{
    public <#= item["Name"] #>Dal(DatabaseOptions settings) : base(settings)
    {
    }
}


<#    
FileHelper.CreateAndClearBuilder($"{filePath}/{item["Name"]}Dal.cs",this.GenerationEnvironment);
}
#>