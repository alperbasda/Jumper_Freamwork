<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ import namespace="System" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ assembly name="Newtonsoft.Json" #>
<#@ assembly name="System.Runtime" #>
<#@ import namespace="System.Runtime" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="Newtonsoft.Json.Linq" #>
<#@ assembly name="_Dependencies\Jumper.CodeGenerator.Helpers.dll" #>
<#@ import namespace="Jumper.CodeGenerator.Helpers.Constants" #>
<#@ import namespace="Jumper.CodeGenerator.Helpers.DirectoryHelpers" #>
<#@ import namespace="Jumper.CodeGenerator.Helpers.StringHelpers" #>
<#@ import namespace="Jumper.CodeGenerator.Helpers.FileHelpers" #>
<#@ output extension=".cs" #>

<#
    string settingsJson = File.ReadAllText(FileSettings.ReadProjectPath);
    var datasource = JObject.Parse(settingsJson);
    var filePath = $"{FileSettings.ProjectCreateDirectory}{datasource["SolutionName"]}/Cqrs/{datasource["SolutionName"]}.Persistence";
    DirectoryHelper.CreateDirectoryIfNotExists(filePath);
#>
<#= FileSettings.AUTO_GENERATED_MESSAGE #>
using Core.Persistence.Models;
using <#= datasource["SolutionName"] #>.Application.Services.Repositories;
using <#= datasource["SolutionName"] #>.Persistence.Contexts;
using <#= datasource["SolutionName"] #>.Persistence.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;

namespace <#= datasource["SolutionName"] #>.Persistence;

public static class PersistenceServiceRegistration
{
    public static IServiceCollection AddPersistenceServices(this IServiceCollection services,IConfiguration configuration)
    {
        #region Db Options

        DatabaseOptions opts = new DatabaseOptions();

        configuration.GetSection("DatabaseOptions").Bind(opts);
        services.Configure<DatabaseOptions>(options =>
        {
            options = opts;
        });
        services.AddSingleton(sp =>
        {
            return opts;
        });


        #endregion

        services.AddDbContext<JumperDbContext>(options => options.UseSqlServer(opts.EfConnectionString));
        <#
        WriteLine("");
        foreach(var item in datasource["Entities"])
        {
        WriteLine("");
        WriteLine($"\t\tservices.AddScoped<I{item["Name"]}Dal, {item["Name"]}Dal>();");
        
        }
        #>

        return services;
    }
}
<#    
FileHelper.CreateAndClearBuilder($"{filePath}/PersistenceRegistrationServiceTemplate.cs",this.GenerationEnvironment);

#>