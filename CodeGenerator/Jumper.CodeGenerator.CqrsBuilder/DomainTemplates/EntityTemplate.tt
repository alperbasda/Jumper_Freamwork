<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ import namespace="System" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ assembly name="Newtonsoft.Json" #>
<#@ assembly name="System.Runtime" #>
<#@ import namespace="System.Runtime" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="Newtonsoft.Json.Linq" #>
<#@ assembly name="_Dependencies\Jumper.CodeGenerator.Helpers.dll" #>
<#@ import namespace="Jumper.CodeGenerator.Helpers.Constants" #>
<#@ import namespace="Jumper.CodeGenerator.Helpers.DirectoryHelpers" #>
<#@ import namespace="Jumper.CodeGenerator.Helpers.StringHelpers" #>
<#@ import namespace="Jumper.CodeGenerator.Helpers.FileHelpers" #>

<#@ output extension=".cs" #>

<#
    
    string settingsJson = File.ReadAllText(FileSettings.ReadProjectPath);
    var datasource = JObject.Parse(settingsJson);
    var filePath = $"{FileSettings.ProjectCreateDirectory}{datasource["SolutionName"]}/Cqrs/{datasource["SolutionName"]}.Domain/Entities";
    DirectoryHelper.CreateDirectoryIfNotExists(filePath);
#>


<#

var entities = datasource["Entities"].Where(w => w["DatabaseType"]!.ToString() != "4");
foreach (var item in entities!)
{
#>
<#= FileSettings.AUTO_GENERATED_MESSAGE #>
using Core.Persistence.Models;
namespace <#= datasource["SolutionName"] #>.Domain.Entities;

public class <#= item["Name"] #> : Entity<Guid>
{
<#    
        //Bu Bilgi n to n relation tablosu oldugunu gösterir ve virtual objelerini işlememiz gerekir.
        var isRelationTable =  bool.Parse(item["IsConstant"].ToString()) == true && item["Name"].ToString().EndsWith("Relation");
        foreach(var prop in item["Properties"])
        {
             if (ProjectSettings.EntityExculededProperties.Contains(prop["Name"].ToString()))
             {
                continue;
             }
             WriteLine($"\tpublic {prop["PropertyTypeCode"]} {prop["Name"]} {{ get; set; }}");
             if(isRelationTable && prop["Name"].ToString().EndsWith("Id"))
             {
                 var entityName = prop["Name"].ToString().Substring(0,prop["Name"].ToString().Length-2);
                 WriteLine($"\tpublic virtual {entityName} {entityName} {{ get; set; }}");
             }
        }

        foreach (var dependency in datasource["Relations"].Where(w => w["DependsOnId"].ToString() == item["Id"].ToString()))
        {
            if (dependency["EntityDependencyType"].ToString() == "2")
            {
                var relationTableName = StringHelper.GetRelationTableName(dependency["DependedName"].ToString(),dependency["DependsOnName"].ToString());
                WriteLine($"\tpublic virtual ICollection<{relationTableName}> {dependency["DependedName"].ToString().ToPlural()} {{ get; set; }}");    
                continue;
            }

            if (!item["Properties"].Any(w => w["Name"].ToString() == $"{dependency["DependedName"]}Id"))
            {
                WriteLine($"\tpublic Guid {dependency["DependedName"]}Id {{ get; set; }}");
            }
        
            WriteLine($"\tpublic virtual {dependency["DependedName"]} {dependency["DependedName"]} {{ get; set; }}");
        }
        foreach (var dependency in datasource["Relations"].Where(w => w["DependedId"].ToString() == item["Id"].ToString()))
        {
            if (dependency["EntityDependencyType"].ToString() == "2")
            {
                var relationTableName = StringHelper.GetRelationTableName(dependency["DependedName"].ToString(),dependency["DependsOnName"].ToString());
                WriteLine($"\tpublic virtual ICollection<{relationTableName}> {dependency["DependsOnName"].ToString().ToPlural()} {{ get; set; }}");    
                continue;
            }
            WriteLine($"\tpublic virtual ICollection<{dependency["DependsOnName"]}> {dependency["DependsOnName"].ToString().ToPlural()} {{ get; set; }}");
        }
#>
}


<#    
FileHelper.CreateAndClearBuilder($"{filePath}/{item["Name"]}.cs",this.GenerationEnvironment);
}
#>
